.type Rune <: symbol
.decl rune(i: number, r: Rune)
rune(i, r) :-
  input_string(s),
  i = range(0, strlen(s) / 3),
  r = substr(s, i * 3, 3).

.decl last_rune(i: number, r: Rune)
last_rune(i, r) :-
  i = max j: rune(j, r).

.type Seq = [h: symbol, next: Seq]

.decl rune_seq(i: number, seq: Seq)
rune_seq(last, seq) :-
  last_rune(last, r),
  seq = [r, nil].

rune_seq(i, seq) :-
  rune_seq(i0, seq0),
  i = i0 - 1,
  rune(i, r),
  seq = [r, seq0].

.decl rune_seq0(seq: Seq)
rune_seq0(seq) :-
  rune_seq(0, seq).

//===============================

.type Token <: symbol
.decl tokenis(t: Token, i: number, start: number)
tokenis(as(token, Token), 0, 0) :-
  ( rune_seq0([token, _]);
    rune_seq0([a, [b, _]]), token = cat(a, b);
    rune_seq0([a, [b, [c, _]]]), token = cat(cat(a, b), c);
    rune_seq0([a, [b, [c, [d, _]]]]), token = cat(cat(cat(a, b), c), d)
  ),
  dict(token).

tokenis(as(token, Token), i, s) :-
  tokenis(token0, i0, s0),
  i = i0 + 1,
  s = s0 + strlen(token0) / 3,
  ( rune_seq(s, [token,  _]);
    rune_seq(s, [a, [b, _]]), token = cat(a, b);
    rune_seq(s, [a, [b, [c, _]]]), token = cat(cat(a, b), c);
    rune_seq(s, [a, [b, [c, [d, _]]]]), token = cat(cat(cat(a, b), c), d)
  ),
  dict(token).

.decl token_maxi(t: Token, i: number)
token_maxi(t, i) :-
  i = max j: tokenis(t, j, _).

.type TokenSequence = [h: Token, next: TokenSequence]
.decl sequence(seq: TokenSequence, i: number)
sequence([token, nil], i) :- token_maxi(token, i).
sequence([token, seq], i-1) :- sequence(seq, i), tokenis(token, i-1, _).

.decl sequence0(seq: TokenSequence)
sequence0(seq) :- sequence(seq, 0).

